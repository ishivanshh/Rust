OWNERSHIP =>  et of rules that govern how a Rust program manages memory.

THE STACK AND THE HEAP.
>> both the stack and the heap are the parts of memory availabe to your code at use at a runtime , but their structure is diofferent.

1).  The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as last in, first out , Adding data is called pushing onto the stack, and removing data is called popping off the stack.
all the data stored in the stack must have fisex size 

>>>  Data with an unknown size at compile time or a size that might change must be stored on the heap instead.

2). Heap is less unorganized,  when you put data on the heap, you request a certain amount of space. The memory allocator finds an empty spot in the heap that is big enough mark it as being in use and return a pointer which is the address of that location. now pointer to heap know the fixed size , u can store the pointer to the stack 

OWNERSHIP RULES .......

1. each value in rust has an owner 
2. there can only be one owner ata time 
3. when the owner goes out of scope, the value will be dropped.

>>> Variables Scope

{                // this scope starts here and s is not valid here
    let s = "hello";   // s is valid from this point 
    // do stuff with s 
}                // this scope is over now 

>> The string type =>This type manages data allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a String from a string literal using the from function
let s = String::from("hello");

>>> This kind of string can be mutated:

let mut s = String::from("hello");

    s.push_str(", world!"); // push_str() appends a literal to a String

    println!("{s}"); // This will print `hello, world!`

5). Memory and allocation.

  {
        let s = String::from("hello"); // s is valid from this point forward

        // do stuff with s
    }                                  // this scope is now over, and s is no
                                       // longer valid
>> when s goes out of scope , when a variable goes out of scope, rust calls a special function for us. this function is calles as DROP 

6). Variables and Data inteeracting with move

>>  let x = 5;
    let y = x;
x and y both are equal , known fixed size and these two 5 values are pushed onto the stack.
NOW, LOOK AT THE STRING VERSION..

let s1 = String::from("hello");
let s2 = s1; 
>>  A string is made up of three parts , pointer , lenght , capacity 
When we assign s1 to s2, the String data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer.
Rust automatically calls the drop function and cleans up the heap memory for that variable. This is a problem: when s2 and s1 go out of scope, they will both try to free the same memory. This is known as a double free error and is one of the memory safety bugs we mentioned previously.
let s1 = String::from("hello");
let s2 = s1;

println!("{s1}, world!");

6). Scope and Assignment.
let mut s = String::from("hello");
s = String::from("ahoy");
println!("{s}, world!");
 s and bind it to a String with the value "hello". Then we immediately create a new String with the value "ahoy" and assign it to s. At this point, nothing is referring to the original value on the heap at all.
