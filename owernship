OWNERSHIP =>  et of rules that govern how a Rust program manages memory.

THE STACK AND THE HEAP.
>> both the stack and the heap are the parts of memory availabe to your code at use at a runtime , but their structure is diofferent.

1).  The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as last in, first out , Adding data is called pushing onto the stack, and removing data is called popping off the stack.
all the data stored in the stack must have fisex size 

>>>  Data with an unknown size at compile time or a size that might change must be stored on the heap instead.

2). Heap is less unorganized,  when you put data on the heap, you request a certain amount of space. The memory allocator finds an empty spot in the heap that is big enough mark it as being in use and return a pointer which is the address of that location. now pointer to heap know the fixed size , u can store the pointer to the stack 

OWNERSHIP RULES .......

1. each value in rust has an owner 
2. there can only be one owner ata time 
3. when the owner goes out of scope, the value will be dropped.

>>> Variables Scope

{                // this scope starts here and s is not valid here
    let s = "hello";   // s is valid from this point 
    // do stuff with s 
}                // this scope is over now 

>> The string type => huhuhuhuhuhuhuhuhuhuhhuhuhuuuhu
